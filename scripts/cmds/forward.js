module.exports = {
	config: {
		name: "forward",
		aliases: ["fw", "fwd"],
		version: "1.0", 
		author: "NTKhang",
		countDown: 5,
		role: 0,
		description: {
			vi: "Chuy·ªÉn ti·∫øp tin nh·∫Øn ƒë·∫øn nh√≥m kh√°c",
			en: "Forward message to other groups"
		},
		category: "box chat",
		guide: {
			vi: "   {pn} <thread ID>: reply tin nh·∫Øn c·∫ßn chuy·ªÉn ti·∫øp v√† nh·∫≠p ID nh√≥m ƒë√≠ch"
				+ "\n   {pn} list: xem danh s√°ch nh√≥m b·∫°n c√≥ th·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn ƒë·∫øn",
			en: "   {pn} <thread ID>: reply to the message to forward and enter target thread ID"
				+ "\n   {pn} list: view list of groups you can forward messages to"
		}
	},

	langs: {
		vi: {
			noReply: "‚ö†Ô∏è | Vui l√≤ng reply tin nh·∫Øn c·∫ßn chuy·ªÉn ti·∫øp",
			invalidThreadID: "‚ö†Ô∏è | Thread ID kh√¥ng h·ª£p l·ªá",
			forwardSuccess: "‚úÖ | ƒê√£ chuy·ªÉn ti·∫øp tin nh·∫Øn th√†nh c√¥ng",
			forwardError: "‚ùå | Kh√¥ng th·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn",
			groupList: "üìã | Danh s√°ch nh√≥m b·∫°n c√≥ th·ªÉ chuy·ªÉn ti·∫øp:\n%1",
			noGroups: "‚ö†Ô∏è | B·∫°n kh√¥ng c√≥ nh√≥m n√†o ƒë·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn"
		},
		en: {
			noReply: "‚ö†Ô∏è | Please reply to the message you want to forward",
			invalidThreadID: "‚ö†Ô∏è | Invalid thread ID",
			forwardSuccess: "‚úÖ | Message forwarded successfully", 
			forwardError: "‚ùå | Cannot forward this message",
			groupList: "üìã | List of groups you can forward to:\n%1",
			noGroups: "‚ö†Ô∏è | You don't have any groups to forward messages to"
		}
	},

	onStart: async function ({ message, event, args, api, threadsData, getLang }) {
		const { messageReply, threadID, senderID } = event;

		if (args[0] === "list") {
			const allThreads = await threadsData.getAll();
			const userThreads = allThreads.filter(t => 
				t.threadID !== threadID && 
				t.members.some(m => m.userID === senderID && m.inGroup)
			);

			if (userThreads.length === 0) {
				return message.reply(getLang("noGroups"));
			}

			const threadList = userThreads
				.slice(0, 10)
				.map((t, i) => `${i + 1}. ${t.threadName || "Unnamed"} (${t.threadID})`)
				.join("\n");

			return message.reply(getLang("groupList", threadList));
		}

		if (!messageReply) {
			return message.reply(getLang("noReply"));
		}

		const targetThreadID = args[0];
		if (!targetThreadID || isNaN(targetThreadID)) {
			return message.reply(getLang("invalidThreadID"));
		}

		const messageID = messageReply.messageID;

		try {
			await api.forwardMessage(messageID, [targetThreadID]);
			return message.reply(getLang("forwardSuccess"));
		} catch (err) {
			return message.reply(getLang("forwardError"));
		}
	}
};